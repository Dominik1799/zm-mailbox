version: 2

############################################################################

references:
   default_environment_settings: &default_environment_settings
      docker:
        - image: zimbra/zm-base-os:devcore-ubuntu-16.04
      environment:
        - ANT_OPTS: "-Dzimbra.buildinfo.version=8.9.0"
        - BUILD: "/home/build"
      working_directory: /home/build/zm-mailbox-circleci
   default_attach_workspace: &default_attach_workspace
         attach_workspace:
            at: /home/build/
   install_docker_client: &install_docker_client
       run:
          name: Installing Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin
   load_env: &load_env
       run: echo 'source $PWD/.env' >> $BASH_ENV
   build_docker_context: &build_docker_context
       run:
          name: Building docker context
          command: |
            echo "Building the docker context file"
            mkdir -p "$BUILD"/zm-docker/BUILDS/latest
            cp -r "$BUILD"/BUILDS/UBUNTU16_64-ZIMBRAX-890-*/archives "$BUILD"/zm-docker/BUILDS/latest || echo ""
   install_python: &install_python
       run:
          name: Installing python
          command: |
            sudo apt update
            sudo apt install -y python
   start_apt_catcher_ng: &start_apt_catcher_ng
       run:
          name: Starting apt-cacher-ng
          command: |
            docker pull sameersbn/apt-cacher-ng:latest
            docker run --name apt-cacher-ng -d --rm --publish 3142:3142 --volume APT-CACHER-NG:/var/cache/apt-cacher-ng sameersbn/apt-cacher-ng:latest
############################################################################

jobs:
  checkout_and_verify_params:
    <<: *default_environment_settings
    steps:
      - checkout
      - run:
          name: Verifying configuration parameters
          command: |
            [ ! -z "$DOCKER_USER" ] || exit 1
            [ ! -z "$DOCKER_PASS" ] || exit 1
            [ ! -z "$DOCKER_REPO_NS" ] || exit 1
            export SANITIZED_BRANCH=${CIRCLE_BRANCH/\//_}
            echo "Docker Repo Namespace: $DOCKER_REPO_NS"
            echo "Docker User: $DOCKER_USER"
            echo "Sanitized branch name: $SANITIZED_BRANCH"
            echo "SANITIZED_BRANCH=$SANITIZED_BRANCH" | tee -a .env;
      - persist_to_workspace:
          root: /home/build/
          paths:
            - zm-mailbox-circleci  
            - .ssh
  build_native_submodule:
    <<: *default_environment_settings
    steps: 
      - *default_attach_workspace
      - run:
          name: Building 'zm-mailbox/native'
          command: ant -f native/build.xml compile publish-local
      - persist_to_workspace:
          root: /home/build/
          paths:
            - zm-mailbox-circleci/native
            - .zcs-deps/zimbra/zm-native
  build_common_submodule:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - run:
          name: Building 'zm-mailbox/common'
          command: ant -f common/build.xml compile publish-local
      - persist_to_workspace:
          root: /home/build/
          paths:
            - zm-mailbox-circleci/common
            - .zcs-deps/zimbra/zm-common
  build_soap_submodule:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - run:
          name: Building 'zm-mailbox/soap'
          command: ant -f soap/build.xml compile publish-local
      - persist_to_workspace:
          root: /home/build/
          paths:
            - zm-mailbox-circleci/soap
            - .zcs-deps/zimbra/zm-soap
  build_client_submodule:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - run:
          name: Building 'zm-mailbox/client'
          command: ant -f client/build.xml compile publish-local
      - persist_to_workspace:
          root: /home/build/
          paths:
            - zm-mailbox-circleci/client
            - .zcs-deps/zimbra/zm-client
  build_store_submodule:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - run:
          name: Building 'zm-mailbox/store'
          command: ant -f store/build.xml compile publish-local
      - persist_to_workspace:
          root: /home/build/
          paths:
            - zm-mailbox-circleci/store
            - .zcs-deps/zimbra/zm-store
  test_native_submodule:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - run:
          name: Running unit tests for 'zm-mailbox/native'
          command: |
            set -e
            ant -Dhalt-on-failure=true -f native/build.xml test
      - store_test_results:
          path: native/build/test/report
      - store_artifacts:
          path: native/build/test/report
  test_common_submodule:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - run:
          name: Running unit tests for 'zm-mailbox/common'
          command: |
            set -e
            ant -Dhalt-on-failure=true -f common/build.xml test
      - store_test_results:
          path: common/build/test/report
      - store_artifacts:
          path: common/build/test/report
  test_soap_submodule:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - run:
          name: Running unit tests for 'zm-mailbox/soap'
          command: |
            set -e
            ant -Dhalt-on-failure=true -f soap/build.xml test
      - store_test_results:
          path: soap/build/test/report
      - store_artifacts:
          path: soap/build/test/report
  test_client_submodule:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - run:
          name: Running unit tests for 'zm-mailbox/client'
          command: |
            set -e
            ant -Dhalt-on-failure=true -f client/build.xml test
      - store_test_results:
          path: client/build/test/report
      - store_artifacts:
          path: client/build/test/report
  test_store_submodule:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - run:
          name: Running unit tests for 'zm-mailbox/store'
          command: |
            set -e 
            ant -Dhalt-on-failure=true -f store/build.xml test
      - store_test_results:
          path: store/build/test/report
      - store_artifacts:
          path: store/build/test/report
  checkout_and_build_installer:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - run:
          name: Preparing to build installer - checking out zm-build & zm-docker
          command: |
            mkdir -p "$BUILD"
            cd "$BUILD"
            [ ! -z "$DOCKER_USER" ] && git clone --depth=1 --branch develop git@github.com:ZimbraOS/zm-build.git zm-build || echo "Skipping zm-build checkout"
            [ ! -z "$DOCKER_USER" ] && git clone --depth=1 --branch develop git@github.com:ZimbraOS/zm-docker.git zm-docker || echo "Skipping zm-docker checkout"
      - run:
          name: Building Zimbra Installer package + debian files
          command: |
            touch /home/build/zm-docker/.env
            [ ! -z "$DOCKER_USER" ] && cd "$BUILD"/zm-build || echo ""
            [ ! -z "$DOCKER_USER" ] && cp "$CIRCLE_WORKING_DIRECTORY/.circleci/images/zmc-mailbox/config.build" "$BUILD"/zm-build  || echo ""
            [ ! -z "$DOCKER_USER" ] && echo "BUILD_NO=$CIRCLE_BUILD_NUM" >> "$BUILD"/zm-build/config.build  || echo ""
            [ ! -z "$DOCKER_USER" ] && ./build.pl || echo "Skipping building the installer" || echo ""
      - persist_to_workspace:
          root: /home/build/
          paths:
            - zm-build
            - zm-docker 
            - BUILDS
            - .zcs-deps
            - .staging
  build_and_deploy_zmcbase_container_images:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - setup_remote_docker
      - *install_docker_client
      - *load_env
      - *build_docker_context
      - *install_python
      - *start_apt_catcher_ng
      - run:
          name: Building zmc-base container image
          command: |
            mkdir -p "$BUILD"
            cd "$BUILD"/zm-docker
            cp _base/Dockerfile .
            tar zcvf docker-context.tgz *
            python -m SimpleHTTPServer &
            docker build --build-arg "PACKAGE_CNF=_conf/pkg-list.in" --build-arg "PACKAGE_KEY=_conf/pkg-key.in" -t zmc-base http://$(hostname):8000/docker-context.tgz
      - run:
          name: Going to push zmc-base container image
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            export CONTAINERNAME="zmc-base"
            docker tag "${CONTAINERNAME}" "${DOCKER_REPO_NS}/${CONTAINERNAME}:pretest-${SANITIZED_BRANCH}"
            docker push "${DOCKER_REPO_NS}/${CONTAINERNAME}:pretest-${SANITIZED_BRANCH}"
  build_and_deploy_zmcldap_container_images:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - setup_remote_docker
      - *install_docker_client
      - *load_env
      - *build_docker_context
      - *install_python
      - *start_apt_catcher_ng
      - run:
          name: Building zmc-ldap container image
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            cd "$BUILD"/zm-docker
            cp ldap/Dockerfile .
            tar zcvf "$BUILD/docker-context.tgz" *
            cd "$BUILD"; python -m SimpleHTTPServer &
            docker build -t zmc-ldap --build-arg "DOCKER_REPO_NS=$DOCKER_REPO_NS" --build-arg "DOCKER_BUILD_TAG=pretest-${SANITIZED_BRANCH}" --build-arg "DOCKER_CACHE_TAG=$DOCKER_CACHE_TAG" --build-arg "LOCAL_SRC_DIR=." http://$(hostname):8000/docker-context.tgz
      - run:
          name: Going to push zmc-ldap container image
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            export CONTAINERNAME="zmc-ldap"
            docker tag "${CONTAINERNAME}" "${DOCKER_REPO_NS}/${CONTAINERNAME}:pretest-${SANITIZED_BRANCH}"
            docker push "${DOCKER_REPO_NS}/${CONTAINERNAME}:pretest-${SANITIZED_BRANCH}"
  build_and_deploy_zmcmta_container_images:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - setup_remote_docker
      - *install_docker_client
      - *load_env
      - *build_docker_context
      - *install_python
      - *start_apt_catcher_ng
      - run:
          name: Building zmc-mta container image
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            cd "$BUILD"/zm-docker
            cp mta/Dockerfile .
            tar zcvf "$BUILD/docker-context.tgz" *
            cd "$BUILD"; python -m SimpleHTTPServer &
            docker build -t zmc-mta --build-arg "DOCKER_REPO_NS=$DOCKER_REPO_NS" --build-arg "DOCKER_BUILD_TAG=pretest-${SANITIZED_BRANCH}" --build-arg "DOCKER_CACHE_TAG=$DOCKER_CACHE_TAG" --build-arg "LOCAL_SRC_DIR=." http://$(hostname):8000/docker-context.tgz
      - run:
          name: Going to push zmc-mta container image
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            export CONTAINERNAME="zmc-mta"
            docker tag "${CONTAINERNAME}" "${DOCKER_REPO_NS}/${CONTAINERNAME}:pretest-${SANITIZED_BRANCH}"
            docker push "${DOCKER_REPO_NS}/${CONTAINERNAME}:pretest-${SANITIZED_BRANCH}"
  build_and_deploy_zmcmailbox_container_images:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - setup_remote_docker
      - *install_docker_client
      - *load_env
      - *build_docker_context
      - *install_python
      - *start_apt_catcher_ng
      - run:
          name: Building zmc-mailbox container image
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            cd "$BUILD"/zm-docker
            cp mailbox/Dockerfile .
            tar zcvf "$BUILD/docker-context.tgz" *
            cd "$BUILD"; python -m SimpleHTTPServer &
            docker build -t zmc-mailbox --build-arg "DOCKER_REPO_NS=$DOCKER_REPO_NS" --build-arg "DOCKER_BUILD_TAG=pretest-${SANITIZED_BRANCH}" --build-arg "DOCKER_CACHE_TAG=$DOCKER_CACHE_TAG" --build-arg "LOCAL_SRC_DIR=." http://$(hostname):8000/docker-context.tgz
      - run:
          name: Going to push zmc-mailbox container image
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            export CONTAINERNAME="zmc-mailbox"
            docker tag "${CONTAINERNAME}" "${DOCKER_REPO_NS}/${CONTAINERNAME}:pretest-${SANITIZED_BRANCH}"
            docker push "${DOCKER_REPO_NS}/${CONTAINERNAME}:pretest-${SANITIZED_BRANCH}"
  build_and_deploy_zmcmailbox_debug_container_images:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - setup_remote_docker
      - *install_docker_client
      - *load_env
      - *build_docker_context
      - *install_python
      - *start_apt_catcher_ng
      - run:
          name: Create debug healthcheck.py file
          command: |
            echo "generate-healthcheck started.."
            cd "$BUILD"/zm-docker/mailbox_debug
            cp ../mailbox/healthcheck.py healthcheck_base.py
            split -l 10 healthcheck_base.py
            cat xaa healthcheck_debug.py xa[b-z] > healthcheck.py
            sed -i 's/\    main/    main_debug/' healthcheck.py
            rm xa*
            echo "generate-healthcheck finished.."
      - run:
          name: Building zmc-mailbox_debug container image
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            cd "$BUILD"/zm-docker
            cp mailbox_debug/Dockerfile .
            cat Dockerfile | sed 's/healthcheck/healthcheck_debug/g' > Docker.tmp
            mv Docker.tmp Dockerfile
            tar zcvf "$BUILD/docker-context.tgz" *
            cd "$BUILD"; python -m SimpleHTTPServer &
            docker build -t zmc-mailbox_debug --build-arg "DOCKER_REPO_NS=$DOCKER_REPO_NS" --build-arg "DOCKER_BUILD_TAG=pretest-${SANITIZED_BRANCH}" --build-arg "DOCKER_CACHE_TAG=$DOCKER_CACHE_TAG" --build-arg "LOCAL_SRC_DIR=." http://$(hostname):8000/docker-context.tgz
      - run:
          name: Going to push zmc-mailbox_debug container image
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            export CONTAINERNAME="zmc-mailbox_debug"
            docker tag "${CONTAINERNAME}" "${DOCKER_REPO_NS}/${CONTAINERNAME}:pretest-${SANITIZED_BRANCH}"
            docker push "${DOCKER_REPO_NS}/${CONTAINERNAME}:pretest-${SANITIZED_BRANCH}"
  build_and_deploy_zmcmysqlproxy_container_images:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - setup_remote_docker
      - *install_docker_client
      - *load_env
      - *build_docker_context
      - *install_python
      - *start_apt_catcher_ng
      - run:
          name: Building zmc-mysql-proxy container image
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            cd "$BUILD"/zm-docker
            cp mysql-proxy/Dockerfile .
            tar zcvf "$BUILD/docker-context.tgz" *
            cd "$BUILD"; python -m SimpleHTTPServer &
            docker build -t zmc-mysql-proxy --build-arg "DOCKER_REPO_NS=$DOCKER_REPO_NS" --build-arg "DOCKER_BUILD_TAG=pretest-${SANITIZED_BRANCH}" --build-arg "DOCKER_CACHE_TAG=$DOCKER_CACHE_TAG" --build-arg "LOCAL_SRC_DIR=." http://$(hostname):8000/docker-context.tgz
      - run:
          name: Going to push zmc-mysql-proxy container image
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            export CONTAINERNAME="zmc-mysql-proxy"
            docker tag "${CONTAINERNAME}" "${DOCKER_REPO_NS}/${CONTAINERNAME}:pretest-${SANITIZED_BRANCH}"
            docker push "${DOCKER_REPO_NS}/${CONTAINERNAME}:pretest-${SANITIZED_BRANCH}"
  build_and_deploy_zmcmysqllocal_container_images:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - setup_remote_docker
      - *install_docker_client
      - *load_env
      - *build_docker_context
      - *install_python
      - *start_apt_catcher_ng
      - run:
          name: Building zmc-mysql-local container image
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            cd "$BUILD"/zm-docker
            cp mysql-local/Dockerfile .
            tar zcvf "$BUILD/docker-context.tgz" *
            cd "$BUILD"; python -m SimpleHTTPServer &
            docker build -t zmc-mysql-local --build-arg "DOCKER_REPO_NS=$DOCKER_REPO_NS" --build-arg "DOCKER_BUILD_TAG=pretest-${SANITIZED_BRANCH}" --build-arg "DOCKER_CACHE_TAG=$DOCKER_CACHE_TAG" --build-arg "LOCAL_SRC_DIR=." http://$(hostname):8000/docker-context.tgz
      - run:
          name: Going to push zmc-mysql-local container image
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            export CONTAINERNAME="zmc-mysql-local"
            docker tag "${CONTAINERNAME}" "${DOCKER_REPO_NS}/${CONTAINERNAME}:pretest-${SANITIZED_BRANCH}"
            docker push "${DOCKER_REPO_NS}/${CONTAINERNAME}:pretest-${SANITIZED_BRANCH}"
  build_and_deploy_zmcproxy_container_images:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - setup_remote_docker
      - *install_docker_client
      - *load_env
      - *build_docker_context
      - *install_python
      - *start_apt_catcher_ng
      - run:
          name: Building zmc-proxy container image
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            cd "$BUILD"/zm-docker
            cp proxy/Dockerfile .
            tar zcvf "$BUILD/docker-context.tgz" *
            cd "$BUILD"; python -m SimpleHTTPServer &
            docker build -t zmc-proxy --build-arg "DOCKER_REPO_NS=$DOCKER_REPO_NS" --build-arg "DOCKER_BUILD_TAG=pretest-${SANITIZED_BRANCH}" --build-arg "DOCKER_CACHE_TAG=$DOCKER_CACHE_TAG" --build-arg "LOCAL_SRC_DIR=." http://$(hostname):8000/docker-context.tgz
      - run:
          name: Going to push zmc-proxy container image
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            export CONTAINERNAME="zmc-proxy"
            docker tag "${CONTAINERNAME}" "${DOCKER_REPO_NS}/${CONTAINERNAME}:pretest-${SANITIZED_BRANCH}"
            docker push "${DOCKER_REPO_NS}/${CONTAINERNAME}:pretest-${SANITIZED_BRANCH}"
  build_and_deploy_zmczookeeper_container_images:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - setup_remote_docker
      - *install_docker_client
      - *load_env
      - *build_docker_context
      - *install_python
      - *start_apt_catcher_ng
      - run:
          name: Building zmc-zookeeper container image
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            cd "$BUILD"/zm-docker
            cp zk/Dockerfile .
            tar zcvf "$BUILD/docker-context.tgz" *
            cd "$BUILD"; python -m SimpleHTTPServer &
            docker build -t zmc-zookeeper --build-arg "DOCKER_REPO_NS=$DOCKER_REPO_NS" --build-arg "DOCKER_BUILD_TAG=pretest-${SANITIZED_BRANCH}" --build-arg "DOCKER_CACHE_TAG=$DOCKER_CACHE_TAG" --build-arg "LOCAL_SRC_DIR=." http://$(hostname):8000/docker-context.tgz
          no_output_timeout: 30m
      - run:
          name: Going to push zmc-zookeeper container image
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            export CONTAINERNAME="zmc-zookeeper"
            docker tag "${CONTAINERNAME}" "${DOCKER_REPO_NS}/${CONTAINERNAME}:pretest-${SANITIZED_BRANCH}"
            docker push "${DOCKER_REPO_NS}/${CONTAINERNAME}:pretest-${SANITIZED_BRANCH}"
  build_and_deploy_zmcsolr_container_images:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - setup_remote_docker
      - *install_docker_client
      - *load_env
      - *build_docker_context
      - *install_python
      - *start_apt_catcher_ng
      - run:
          name: Building zmc-solr container image
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            cd "$BUILD"/zm-docker
            cp solr/Dockerfile .
            tar zcvf "$BUILD/docker-context.tgz" *
            cd "$BUILD"; python -m SimpleHTTPServer &
            docker build -t zmc-solr --build-arg "DOCKER_REPO_NS=$DOCKER_REPO_NS" --build-arg "DOCKER_BUILD_TAG=pretest-${SANITIZED_BRANCH}" --build-arg "DOCKER_CACHE_TAG=$DOCKER_CACHE_TAG" --build-arg "LOCAL_SRC_DIR=." http://$(hostname):8000/docker-context.tgz
      - run:
          name: Going to push zmc-solr container image
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            export CONTAINERNAME="zmc-solr"
            docker tag "${CONTAINERNAME}" "${DOCKER_REPO_NS}/${CONTAINERNAME}:pretest-${SANITIZED_BRANCH}"
            docker push "${DOCKER_REPO_NS}/${CONTAINERNAME}:pretest-${SANITIZED_BRANCH}"
  build_and_deploy_zmcredismaster_container_images:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - setup_remote_docker
      - *install_docker_client
      - *load_env
      - *build_docker_context
      - *install_python
      - *start_apt_catcher_ng
      - run:
          name: Building zmc-redismaster container image
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            echo "SANITIZED_BRANCH = ${SANITIZED_BRANCH}"
            cd "$BUILD"/zm-docker
            cp redis_master/Dockerfile .
            tar zcvf "$BUILD/docker-context.tgz" *
            cd "$BUILD"; python -m SimpleHTTPServer &
            docker build -t zmc-redismaster --build-arg "DOCKER_REPO_NS=$DOCKER_REPO_NS" --build-arg "DOCKER_BUILD_TAG=pretest-${SANITIZED_BRANCH}" --build-arg "DOCKER_CACHE_TAG=$DOCKER_CACHE_TAG" --build-arg "LOCAL_SRC_DIR=." http://$(hostname):8000/docker-context.tgz
      - run:
          name: Going to push zmc-redismaster container image
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            export CONTAINERNAME="zmc-redismaster"
            docker tag "${CONTAINERNAME}" "${DOCKER_REPO_NS}/${CONTAINERNAME}:pretest-${SANITIZED_BRANCH}"
            docker push "${DOCKER_REPO_NS}/${CONTAINERNAME}:pretest-${SANITIZED_BRANCH}"
  deploy_to_swarm:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - add_ssh_keys:
          fingerprints:
            - "25:9a:68:3e:d8:ab:fa:39:2e:b2:ce:41:8e:26:28:0d"
      - *load_env
      - run:
          name: setup known_hosts file for infrastructure-dev-deployment
          command: echo '|1|sd70Lml0Kpdm9QA8UX7u46dCevs=|b9cy345Pf4ZAYZ9R0/mW3ogKRds= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBMRWAuJ3TAVVkRP/uFIJVOjEwvm6k+yMxTl0Y+8E/J7B+fw7ctsNa34+RkcXrjqUeLtjSRLpnd8fow8EHtrwiog=' >> ~/.ssh/known_hosts
      - run:
          name: Deploying to one-node aws swarm 
          command: ssh ubuntu@54.157.18.126 "./deploy_images pretest-${SANITIZED_BRANCH}"
  run_sanity_tests:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - add_ssh_keys:
          fingerprints:
            - "25:9a:68:3e:d8:ab:fa:39:2e:b2:ce:41:8e:26:28:0d"
      - *load_env
      - run:
          name: setup known_hosts file for infrastructure-dev-deployment
          command: echo '|1|sd70Lml0Kpdm9QA8UX7u46dCevs=|b9cy345Pf4ZAYZ9R0/mW3ogKRds= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBMRWAuJ3TAVVkRP/uFIJVOjEwvm6k+yMxTl0Y+8E/J7B+fw7ctsNa34+RkcXrjqUeLtjSRLpnd8fow8EHtrwiog=' >> ~/.ssh/known_hosts
      - run:
          name: Running sanity tests 
          command: ssh ubuntu@54.157.18.126 "./run_soap_sanity_tests"
  tag_as_latest_and_push:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - setup_remote_docker
      - *install_docker_client
      - *load_env
      - *build_docker_context
      - *install_python
      - *start_apt_catcher_ng
      - run:
          name: Pulling down pretest tag images
          command: |
            mkdir -p "$BUILD"
            cd "$BUILD"/zm-docker
            containers=('base' 'ldap' 'mta' 'mailbox' 'mailbox_debug' 'mysql-proxy' 'mysql-local' 'proxy' 'zookeeper' 'solr' 'redismaster')
            for container in "${containers[@]}"; do
              make DOCKER_PULL_TAG=pretest-"${SANITIZED_BRANCH}" pull-zmc-"${container}"
            done
      - run:
          name: Tag new images as latest
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
            containers=('base' 'ldap' 'mta' 'mailbox' 'mailbox_debug' 'mysql-proxy' 'mysql-local' 'proxy' 'zookeeper' 'solr' 'redismaster')
            for container in "${containers[@]}"; do         
              docker tag "${DOCKER_REPO_NS}/zmc-${container}:pretest-${SANITIZED_BRANCH}" "${DOCKER_REPO_NS}/zmc-${container}:latest-${SANITIZED_BRANCH}"
              docker push "${DOCKER_REPO_NS}/zmc-${container}:latest-${SANITIZED_BRANCH}"
            done
  update_infdevdeployment_with_latest_tag:
    <<: *default_environment_settings
    steps:
      - *default_attach_workspace
      - add_ssh_keys:
          fingerprints:
            - "25:9a:68:3e:d8:ab:fa:39:2e:b2:ce:41:8e:26:28:0d"
      - *load_env
      - run:
          name: setup known_hosts file for infrastructure-dev-deployment
          command: echo '|1|sd70Lml0Kpdm9QA8UX7u46dCevs=|b9cy345Pf4ZAYZ9R0/mW3ogKRds= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBMRWAuJ3TAVVkRP/uFIJVOjEwvm6k+yMxTl0Y+8E/J7B+fw7ctsNa34+RkcXrjqUeLtjSRLpnd8fow8EHtrwiog=' >> ~/.ssh/known_hosts
      - run:
          name: Updating infrastructure-dev-deployment with latest tag
          command: ssh ubuntu@54.157.18.126 "./deploy_images latest-${SANITIZED_BRANCH}"
############################################################################

workflows:
  version: 2
  build_deploy:
    jobs:
      - checkout_and_verify_params:
          filters:
            branches:
              only:
                 - develop
      - build_native_submodule:
          requires:
            - checkout_and_verify_params
          filters:
            branches:
              only:
                 - develop
      - build_common_submodule:
          requires:
            - build_native_submodule
          filters:
            branches:
              only:
                 - develop
      - build_soap_submodule:
          requires:
            - build_common_submodule
          filters:
            branches:
              only:
                 - develop
      - build_client_submodule:
          requires:
            - build_soap_submodule
          filters:
            branches:
              only:
                 - develop
      - build_store_submodule:
          requires:
            - build_client_submodule
          filters:
            branches:
              only:
                 - develop
      - test_native_submodule:
          requires:
            - build_native_submodule
          filters:
            branches:
              only:
                 - develop
      - test_common_submodule:
          requires:
            - build_common_submodule
          filters:
            branches:
              only:
                 - develop
      - test_soap_submodule:
          requires:
            - build_soap_submodule
          filters:
            branches:
              only:
                 - develop
      - test_client_submodule:
          requires:
            - build_client_submodule
          filters:
            branches:
              only:
                 - develop
      - test_store_submodule:
          requires:
            - build_store_submodule
          filters:
            branches:
              only:
                 - develop
      - checkout_and_build_installer:
          requires:
            - test_native_submodule
            - test_common_submodule
            - test_soap_submodule
            - test_client_submodule
            - test_store_submodule
          filters:
            branches:
              only:
                 - develop
      - build_and_deploy_zmcbase_container_images:
          requires:
            - checkout_and_build_installer
          filters:
            branches:
              only:
                 - develop
      - build_and_deploy_zmcldap_container_images:
          requires:
            - checkout_and_build_installer
          filters:
            branches:
              only:
                 - develop
      - build_and_deploy_zmcmta_container_images:
          requires:
            - checkout_and_build_installer
          filters:
            branches:
              only:
                 - develop
      - build_and_deploy_zmcmailbox_container_images:
          requires:
            - checkout_and_build_installer
          filters:
            branches:
              only:
                 - develop
      - build_and_deploy_zmcmailbox_debug_container_images:
          requires:
            - checkout_and_build_installer
          filters:
            branches:
              only:
                - develop
      - build_and_deploy_zmcmysqlproxy_container_images:
          requires:
            - checkout_and_build_installer
          filters:
            branches:
              only:
                 - develop
      - build_and_deploy_zmcmysqllocal_container_images:
          requires:
            - checkout_and_build_installer
          filters:
            branches:
              only:
                 - develop
      - build_and_deploy_zmcproxy_container_images:
          requires:
            - checkout_and_build_installer
          filters:
            branches:
              only:
                 - develop
      - build_and_deploy_zmczookeeper_container_images:
          requires:
            - checkout_and_build_installer
          filters:
            branches:
              only:
                 - develop
      - build_and_deploy_zmcsolr_container_images:
          requires:
            - checkout_and_build_installer
          filters:
            branches:
              only:
                 - develop
      - build_and_deploy_zmcredismaster_container_images:
          requires:
            - checkout_and_build_installer
          filters:
            branches:
              only:
                 - develop
      - deploy_to_swarm:
          requires:
            - build_and_deploy_zmcbase_container_images
            - build_and_deploy_zmcldap_container_images
            - build_and_deploy_zmcmta_container_images
            - build_and_deploy_zmcmailbox_container_images
            - build_and_deploy_zmcmailbox_debug_container_images
            - build_and_deploy_zmcmysqlproxy_container_images
            - build_and_deploy_zmcmysqllocal_container_images
            - build_and_deploy_zmcproxy_container_images
            - build_and_deploy_zmczookeeper_container_images
            - build_and_deploy_zmcsolr_container_images
            - build_and_deploy_zmcredismaster_container_images
          filters:
            branches:
              only:
                 - develop
      - run_sanity_tests:
          requires:
            - deploy_to_swarm
          filters:
            branches:
              only:
                 - develop
      - tag_as_latest_and_push:
          requires:
            - run_sanity_tests
          filters:
            branches:
              only:
                 - develop
      - update_infdevdeployment_with_latest_tag:
          requires:
            - tag_as_latest_and_push
          filters:
            branches:
              only:
                 - develop
############################################################################
#notify:
#  webhooks:
#    - url: http://ec2-52-90-104-127.compute-1.amazonaws.com:5000/post-status
